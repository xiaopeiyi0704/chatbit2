{
  "version": 3,
  "sources": ["../../../app/routes/app._index.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\app._index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\app._index.jsx\");\n  import.meta.hot.lastModified = \"1701141662521.963\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, Link, useNavigate } from \"@remix-run/react\";\nimport { authenticate } from \"../shopify.server\";\nimport { Card, EmptyState, Layout, Page, IndexTable, Thumbnail, Text, Icon, InlineStack } from \"@shopify/polaris\";\nimport { getQRCodes } from \"../models/QRCode.server\";\nimport { DiamondAlertMajor, ImageMajor } from \"@shopify/polaris-icons\";\nexport async function loader({\n  request\n}) {\n  const {\n    admin,\n    session\n  } = await authenticate.admin(request);\n  const qrCodes = await getQRCodes(session.shop, admin.graphql);\n  return json({\n    qrCodes\n  });\n}\nconst EmptyQRCodeState = ({\n  onAction\n}) => <EmptyState heading=\"Create unique QR codes for your product\" action={{\n  content: \"Create QR code\",\n  onAction\n}} image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\">\r\n    <p>Allow customers to scan codes and buy products using their phones.</p>\r\n  </EmptyState>;\n_c = EmptyQRCodeState;\nfunction truncate(str, {\n  length = 25\n} = {}) {\n  if (!str) return \"\";\n  if (str.length <= length) return str;\n  return str.slice(0, length) + \"\u2026\";\n}\nconst QRTable = ({\n  qrCodes\n}) => <IndexTable resourceName={{\n  singular: \"QR code\",\n  plural: \"QR codes\"\n}} itemCount={qrCodes.length} headings={[{\n  title: \"Thumbnail\",\n  hidden: true\n}, {\n  title: \"Title\"\n}, {\n  title: \"Product\"\n}, {\n  title: \"Date created\"\n}, {\n  title: \"Scans\"\n}]} selectable={false}>\r\n    {qrCodes.map(qrCode => <QRTableRow key={qrCode.id} qrCode={qrCode} />)}\r\n  </IndexTable>;\n_c2 = QRTable;\nconst QRTableRow = ({\n  qrCode\n}) => <IndexTable.Row id={qrCode.id} position={qrCode.id}>\r\n    <IndexTable.Cell>\r\n      <Thumbnail source={qrCode.productImage || ImageMajor} alt={qrCode.productTitle} size=\"small\" />\r\n    </IndexTable.Cell>\r\n    <IndexTable.Cell>\r\n      <Link to={`qrcodes/${qrCode.id}`}>{truncate(qrCode.title)}</Link>\r\n    </IndexTable.Cell>\r\n    <IndexTable.Cell>\r\n      {qrCode.productDeleted ? <InlineStack align=\"start\" gap=\"200\">\r\n          <span style={{\n        width: \"20px\"\n      }}>\r\n            <Icon source={DiamondAlertMajor} tone=\"critical\" />\r\n          </span>\r\n          <Text tone=\"critical\" as=\"span\">\r\n            product has been deleted\r\n          </Text>\r\n        </InlineStack> : truncate(qrCode.productTitle)}\r\n    </IndexTable.Cell>\r\n    <IndexTable.Cell>\r\n      {new Date(qrCode.createdAt).toDateString()}\r\n    </IndexTable.Cell>\r\n    <IndexTable.Cell>{qrCode.scans}</IndexTable.Cell>\r\n  </IndexTable.Row>;\n_c3 = QRTableRow;\nexport default function Index() {\n  _s();\n  const {\n    qrCodes\n  } = useLoaderData();\n  const navigate = useNavigate();\n  return <Page>\r\n      <ui-title-bar title=\"QR codes\">\r\n        <button variant=\"primary\" onClick={() => navigate(\"/app/qrcodes/new\")}>\r\n          Create QR code\r\n        </button>\r\n      </ui-title-bar>\r\n      <Layout>\r\n        <Layout.Section>\r\n          <Card padding=\"0\">\r\n            {qrCodes.length === 0 ? <EmptyQRCodeState onAction={() => navigate(\"qrcodes/new\")} /> : <QRTable qrCodes={qrCodes} />}\r\n          </Card>\r\n        </Layout.Section>\r\n      </Layout>\r\n    </Page>;\n}\n_s(Index, \"oW7M0gPIENGua3Ylz4/HcUyMwQ0=\", false, function () {\n  return [useLoaderData, useNavigate];\n});\n_c4 = Index;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EmptyQRCodeState\");\n$RefreshReg$(_c2, \"QRTable\");\n$RefreshReg$(_c3, \"QRTableRow\");\n$RefreshReg$(_c4, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm"]
}
